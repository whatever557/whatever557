#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* 상수 정의 Definition of constants*/
#define Nb 4 // AES 블록 크기AES block size (word)
#define Nk 4 // AES 키 길이AES key length (word)
#define Nr 10 // AES 라운드 수 AES round count (128비트 키 사용시 10 라운드)
/* 타입 정의 Type definition */
typedef unsigned int WORD;
typedef unsigned char BYTE;
/* 매크로 함수 Macro function */
#define HIHEX(x) (x >> 4)    // 8bit에서 상위 4bit 값을 구하는 함수 Function to find the upper 4 bit values ​​in 8 bits
#define LOWHEX(x) (x & 0x0F) // 8bit에서 하위 4bit 값을 구하는 함수 Function to find the lower 4 bit value from 8 bit
// BYTE를 WORD로 변환하는 함수 Function to convert BYTE to WORD
#define BTOW(b0, b1, b2, b3)                                                   \
  (((WORD)b0 << 24) | ((WORD)b1 << 16) | ((WORD)b2 << 8) | (WORD)b3)

void KeyExpansion(BYTE *key, WORD *W); // AES 키 확장 함수 AES Key Extension Function
WORD SubWord(WORD W);                  // SubWord
WORD RotWord(WORD W);                  // RotWord

// S-box 상수 S-box constant
BYTE S_box[16][16] = {
    99,  124, 119, 123, 242, 107, 111, 197, 48,  1,   103, 43,  254, 215, 171,
    118, 202, 130, 201, 125, 250, 89,  71,  240, 173, 212, 162, 175, 156, 164,
    114, 192, 183, 253, 147, 38,  54,  63,  247, 204, 52,  165, 229, 241, 113,
    216, 49,  21,  4,   199, 35,  195, 24,  150, 5,   154, 7,   18,  128, 226,
    235, 39,  178, 117, 9,   131, 44,  26,  27,  110, 90,  160, 82,  59,  214,
    179, 41,  227, 47,  132, 83,  209, 0,   237, 32,  252, 177, 91,  106, 203,
    190, 57,  74,  76,  88,  207, 208, 239, 170, 251, 67,  77,  51,  133, 69,
    249, 2,   127, 80,  60,  159, 168, 81,  163, 64,  143, 146, 157, 56,  245,
    188, 182, 218, 33,  16,  255, 243, 210, 205, 12,  19,  236, 95,  151, 68,
    23,  196, 167, 126, 61,  100, 93,  25,  115, 96,  129, 79,  220, 34,  42,
    144, 136, 70,  238, 184, 20,  222, 94,  11,  219, 224, 50,  58,  10,  73,
    6,   36,  92,  194, 211, 172, 98,  145, 149, 228, 121, 231, 200, 55,  109,
    141, 213, 78,  169, 108, 86,  244, 234, 101, 122, 174, 8,   186, 120, 37,
    46,  28,  166, 180, 198, 232, 221, 116, 31,  75,  189, 139, 138, 112, 62,
    181, 102, 72,  3,   246, 14,  97,  53,  87,  185, 134, 193, 29,  158, 225,
    248, 152, 17,  105, 217, 142, 148, 155, 30,  135, 233, 206, 85,  40,  223,
    140, 161, 137, 13,  191, 230, 66,  104, 65,  153, 45,  15,  176, 84,  187,
    22,
};

// Rcon 상수 Rcon constant
static WORD Rcon[11] = {0x01000000, 0x02000000, 0x04000000, 0x08000000,
                        0x10000000, 0x20000000, 0x40000000, 0x80000000,
                        0x1b000000, 0x36000000};

// RotWord (32bit word를 8bit 왼쪽 로테이트 Rotate 32bit word to 8bit left)
WORD RotWord(WORD W) {
    return ((W & 0xFF000000) >> 24) | (W << 8);
}

// SubWord
WORD SubWord(WORD W) {
    int i;
    WORD out = 0, mask = 0xFF000000;
    BYTE shift = 24;
    for (i = 0; i < 4; i++) {
        out += (WORD)S_box[HIHEX((W & mask) >> shift)][LOWHEX((W & mask) >> shift)] << shift;
        mask >>= 8;
        shift -= 8;
    }
    return out;
}

// 키 확장 함수 Key expansion function
void KeyExpansion(BYTE *key, WORD *W) {
    WORD temp;
    int i = 0;
    while (i < Nk) {
        W[i] = BTOW(key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]);
        i = i + 1;
    }
    i = Nk;
    while (i < (Nb * (Nr + 1))) {
        temp = W[i - 1];
        if (i % Nk == 0)
            temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk - 1];
        W[i] = W[i - Nk] ^ temp;
        i += 1;
    }
}

// 확장된 키 출력 Extended Key Output
void printExpandedKey(WORD *W) {
    int i;

    for (i = 0; i < Nb * (Nr + 1); i++) {
        printf("W[%2d] = %08X\n", i, W[i]);
    }
}

int main() {
    BYTE key[Nk*4+1] = {0,};
    WORD W[Nb * (Nr + 1)]; // 확장된 키를 저장할 배열 Array to store extended keys

    printf("*Secret Key : ");
    if (fgets((char*)key, sizeof(key), stdin) == NULL) {
        fprintf(stderr, "Key input error\n");
        return 1;
    }

    // fgets로 입력받은 키의 끝에 개행 문자가 포함되어 있을 경우 제거 Remove newline character if it is included at the end of key input by fgets
    key[strcspn((char*)key, "\n")] = 0;

    // 키 길이가 16자가 아닌 경우 처리 Handling when key length is not 16 characters
    if (strlen((char*)key) != 16) {
        fprintf(stderr, "Key must be 16 characters long.\n");
        return 1;
    }

    KeyExpansion(key, W); // 키 확장 Key extension
  printf("* Extended Key: \n");
    printExpandedKey(W); // 확장된 키 출력 Extended Key Output
    return 0;
}
